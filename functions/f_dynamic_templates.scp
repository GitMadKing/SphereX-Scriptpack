//****************************************************************************
// SphereServer by: SphereServer development team and Menasoft.
// www.sphereserver.net
//****************************************************************************
VERSION=X1

// TODO! Before this script can be fully functional!
//-- In the equippables def add:
//--	EXPANSION
//--	TEVENTS=ei_artifact (done, for the large part)
//--	TEVENTS=ei_material_nonbase

[COMMENT How to setup this script]
1) If you haven't the DTL database file (it should be provided with the script pack), you can rebuild it using "f_DTL_db_rebuild".
2) Tell sphere to load into its in-memory database (MDB) the DTL database file by adding in "f_onserver_start", which is in core/serv_triggers.scp
	this line:
		f_DTL_db_loadtomdb
Done!


[DEFNAME defs_DynamicTemplateLoot]
DTL_DB_File 	databases/dynamictemplate_loot.db
DTL_DB_Table 	DTL

sex_male	0
sex_female	1

// Flags for further categorization, useful for "filtering" out items(or to take only items with certain flags)
//DTL_flag_yourflag				01
DTL_flag_artifact			010000000
DTL_flag_material_nonbase	020000000


[function f_DTL_db_loadtomdb]
mdb.importdb "<serv.scpfiles><def.DTL_DB_File>"

[function f_DTL_db_memtest] // just for testing purposes
mdb.query SELECT defname FROM '<def.DTL_DB_Table>' WHERE sex=1
if <mdb.row.numrows>
	for 0 <eval <mdb.row.numrows>-1>
		serv.log <mdb.row.<dlocal._for>.defname>
	endfor
endif


// DynamicTemplateLoot
[function f_DTLoot] // class, race, sex ID (0=male, 1=female), expamsion ID
if <isempty <argv0>>
	serv.log DynamicTemplate: Invalid args
	return //<def.defaultitem>
endif
if <isempty <argv1>>
	argv1 = "human"
endif
if <isempty <argv2>>
	argv2 = 0
endif
if <isempty <argv3>>
	argv3 = <EraLimitGear>
endif
// In the future we may even use a prepared statement
// Explanation of the query: pick all the defnames that are of the given class, race, sex, with an expansion <= the given one and exclude artifacts and "colored" craftables (made of a non-base material, like iron)
mdb.query SELECT defname FROM '<def.DTL_DB_Table>' WHERE class=<argv0> AND race=<argv1> AND sex=<argv2> AND expansion<=<argv3> AND NOT flags&<eval <def.DTL_flag_artifact>|<def.DTL_flag_material_nonbase>>
if !<mdb.row.numrows>
	serv.log DynamicTemplate: Can't find DB entry with class=<argv1> AND race=<argv1> AND sex=<argv2> AND expansion<=<argv3> AND NOT flags&<eval <def.DTL_flag_artifact>|<def.DTL_flag_material_nonbase>>
	return //<def.defaultitem>
endif
return <mdb.row.<R0,<mdb.row.numrows>>.defname>


[function f_reserved_DTL_db_setup]
if !(<ldb.connected>)
	ldb.connect "<serv.scpfiles><def.DTL_DB_File>"
	if !<ldb.connected>
		serv.log Can't connect to LDB "<serv.scpfiles><def.DTL_DB_File>".
		return 0
	endif
endif

// Delete old table
ldb.execute DROP TABLE IF EXISTS '<def.DTL_DB_Table>'
//Create new table
ldb.execute CREATE TABLE '<def.DTL_DB_Table>' ('defname' TEXT PRIMARY KEY, 'class' TEXT, 'race' TEXT, 'sex' INTEGER, 'expansion' INTEGER, 'flags' INTEGER)

// leave the db open
return 1


[FUNCTION f_DTL_db_rebuild]
local.file = 0
local.ldb = 1
if <local.file>
	file.mode.append=1
endif
if <local.ldb>
	if !<f_reserved_DTL_db_setup>
		local.ldb = 0
	else
		ldb.execute BEGIN
	endif
endif

serv.log Starting DynamicTemplateLoot database rebuilding...
local.hour=<serv.rticks>
for 0 <eval <serv.deflist.itemdef.count>-1>
	local._item=<serv.deflist.itemdef.<dlocal._for>>
	if !<local._item>
		continue
	endif
	
	local._d = serv.itemdef.<local._item>
	
	// Get the Class
	local._t=<eval <<local._d>.type>>
	// Weapon
	if <local._t>==<resdef.t_weapon_fence>
		local.c="weapon_fence"
	elif <local._t>==<resdef.t_weapon_sword>
		local.c="weapon_sword"
	elif <local._t>==<resdef.t_weapon_axe>
		local.c="weapon_axe"
	elif <local._t>==<resdef.t_weapon_mace_smith>
		local.c="weapon_mace_smith"
	elif <local._t>==<resdef.t_weapon_mace_sharp>
		local.c="weapon_mace_sharp"
	elif <local._t>==<resdef.t_weapon_mace_staff>
		local.c="weapon_mace_staff"
	elif <local._t>==<resdef.t_weapon_mace_crook>
		local.c="weapon_mace_crook"
	elif <local._t>==<resdef.t_weapon_mace_pick>
		local.c="weapon_mace_pick"
	elif (<local._t>==<resdef.t_weapon_bow>) || (<local._t>==<resdef.t_weapon_xbow>) || (<local._t>==<resdef.t_weapon_throwing>) 
		local.c="weapon_ranged"
	elif <local._t>==<resdef.t_weapon_thrown> 
		local.c="weapon_thrown"
	elif (<local._t>==<resdef.t_weapon_whip>) || (<local._t>==<resdef.t_fish_pole>) // is it even a weapon?
		local.c="weapon_other"
	elif <local._t>==<resdef.t_wand>
		local.c="wand"
	elif <local._t>==<resdef.t_musical>
		local.c="musical"
	// Armor
	elif <local._t>==<resdef.t_armor>
		local.c="armor"
	elif <local._t>==<resdef.t_armor_leather>
		local.c="armor_leather"
	elif <local._t>==<resdef.t_shield>
		local.c="shield"
	// Clothing
	elif <local._t>==<resdef.t_clothing>
		local.c="clothing"
	elif <local._t>==<resdef.t_jewelry>
		local.c="jewelry"
	// Not interesting
	else
		continue
	endif
	
	local._cu=<<local._d>.canuse>
	local.f=0
	
	// Get the Sex
	if <local._cu>&<def.can_u_female>
		local.s="female" // female only
		local.sid=1
	else
		local.s="male" // male + female
		local.sid=0
	endif
	
	// Get the Race
	if ((<local._cu>&<def.can_u_human>) && (<local._cu>&<def.can_u_gargoyle>) && !(<local._cu>&<def.can_u_elf>))
		local.r="noelf"
	elif ((<local._cu>&<def.can_u_human>) && (<local._cu>&<def.can_u_elf>) && !(<local._cu>&<def.can_u_gargoyle>))
		local.r="nogarg"
	elif ((<local._cu>&<def.can_u_gargoyle>) && !(<local._cu>&(<def.can_u_human>|<def.can_u_elf>)))
		local.r="garg" // garg only
	elif ((<local._cu>&<def.can_u_elf>) && !(<local._cu>&(<def.can_u_human>|<def.can_u_gargoyle>)))
		local.r="elf" // elf only
	elif ((<local._cu>&<def.can_u_human>) && !(<local._cu>&(<def.can_u_elf>|<def.can_u_gargoyle>)))
		local.r="human" // human only
	elif
		local.r="anyrace"
	endif
	
	// Get the Expansion
	local.e=<<local._d>.expansion>
	
	// Get the Flags
	if <<local._d>.istevent.<resdef.ei_artifact>>
		local.f |= <def.DTL_flag_artifact>
	endif
	if <<local._d>.istevent.<resdef.ei_material_nonbase>>
		local.f |= <def.DTL_flag_material_nonbase>
	endif
	
	local.defname=<<local._d>.defname>
	if <isempty <local.defname>>
		local.defname=<<local._d>.id>
	endif
	
	if <local.file> && !<local.f> // don't dump artifacts or items with a non-base material ("colored")
		if !<file.open dump_<local.c>_<local.r>_<local.s>.txt> // FIXME expansion
			serv.log Couldn't open file with c=<local.c>, race=<local.r>, sex=<local.s>
			continue
		endif
		file.writeline <local.defname>
		file.close
	endif
	if <local.ldb>
		ldb.query INSERT OR REPLACE INTO '<def.DTL_DB_Table>' ('defname','class','race','sex','expansion','flags') VALUES ("<local.defname>","<local.c>","<local.r>",<dlocal.sid>,<dlocal.e>,<dlocal.f>)
	endif
endfor

if <local.ldb>
	ldb.execute COMMIT
	ldb.close
endif
serv.log Database rebuilt in <eval <serv.rticks>-<local.hour>> seconds.

[EOF]